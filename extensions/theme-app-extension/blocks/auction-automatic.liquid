{% comment %}
  Automatic Auction Widget - Completely Automatic
  This script automatically detects products with auctions and injects the widget
  No manual theme customization required - works immediately after app installation
{% endcomment %}

{% schema %}
{
  "name": "Automatic Auction Widget",
  "target": "head",
  "settings": [
    {
      "type": "header",
      "content": "Automatic Auction Detection"
    },
    {
      "type": "paragraph",
      "content": "This widget automatically detects products with auctions and overlays the auction interface on the pricing section. No manual configuration needed."
    }
  ]
}
{% endschema %}

<script>
(function() {
    'use strict';

    // Only run on product pages
    if (!window.location.pathname.includes('/products/')) {
        return;
    }

    // Configuration
    const CONFIG = {
        backendUrl: 'https://bidly-auction-backend.onrender.com',
        shopDomain: '{{ shop.permanent_domain }}',
        widgetClass: 'bidly-auto-auction-widget',
        pricingSelectors: [
            '.product-form__price',
            '.price',
            '.product-price',
            '.product__price',
            '[data-price]',
            '.money',
            '.product-single__price',
            '.product__pricing',
            '.product-price-wrapper',
            '.price-wrapper'
        ]
    };

    // Widget HTML template
    function createWidgetHTML(auctionData) {
        const { auctionId, status, currentBid, startingBid, reservePrice, endTime, bidCount, buyNowPrice } = auctionData;
        
        return `
            <div id="bidly-auto-widget-${auctionId}" class="${CONFIG.widgetClass}" data-auction-id="${auctionId}">
                <div class="bidly-widget-overlay">
                    <div class="bidly-widget-header">
                        <h3 class="bidly-widget-title">Live Auction</h3>
                        <div class="bidly-widget-status">
                            ${status === 'active' ? '<span class="bidly-status-active">● LIVE</span>' : 
                              status === 'pending' ? '<span class="bidly-status-pending">● STARTING SOON</span>' : 
                              '<span class="bidly-status-ended">● ENDED</span>'}
                        </div>
                    </div>

                    ${status === 'active' && endTime ? `
                        <div class="bidly-widget-timer">
                            <div class="bidly-timer-label">Ends In:</div>
                            <div class="bidly-countdown" data-end-time="${endTime}">
                                <span class="bidly-timer-days">0</span>d 
                                <span class="bidly-timer-hours">0</span>h 
                                <span class="bidly-timer-minutes">0</span>m 
                                <span class="bidly-timer-seconds">0</span>s
                            </div>
                        </div>
                    ` : ''}

                    <div class="bidly-widget-pricing">
                        <div class="bidly-current-bid">
                            <span class="bidly-label">Current Bid:</span>
                            <span class="bidly-amount" data-current-bid="${currentBid}">$${currentBid.toFixed(2)}</span>
                        </div>
                        ${reservePrice > 0 ? `
                            <div class="bidly-reserve-price">
                                <span class="bidly-label">Reserve:</span>
                                <span class="bidly-amount">$${reservePrice.toFixed(2)}</span>
                            </div>
                        ` : ''}
                        <div class="bidly-bid-count">
                            <span class="bidly-label">Bids:</span>
                            <span class="bidly-count" data-bid-count="${bidCount}">${bidCount}</span>
                        </div>
                    </div>

                    ${status === 'active' ? `
                        <div class="bidly-widget-actions">
                            <button class="bidly-bid-btn" onclick="openBidModal('${auctionId}')">
                                Place a Bid
                            </button>
                            ${buyNowPrice > 0 ? `
                                <button class="bidly-buy-now-btn" onclick="openBuyNowModal('${auctionId}', ${buyNowPrice})">
                                    Buy Now ($${buyNowPrice.toFixed(2)})
                                </button>
                            ` : ''}
                        </div>
                    ` : status === 'pending' ? `
                        <div class="bidly-pending-message">
                            Auction will start soon. Check back later!
                        </div>
                    ` : `
                        <div class="bidly-ended-message">
                            Auction has ended. Final bid: $${currentBid.toFixed(2)}
                        </div>
                    `}

                    <div class="bidly-widget-footer">
                        <a href="#" onclick="openBidHistory('${auctionId}')" class="bidly-history-link">
                            View Bid History
                        </a>
                    </div>
                </div>
            </div>
        `;
    }

    // Check if product has auction data via metafields
    async function checkProductMetafields() {
        try {
            // Try to get product data from Shopify's global objects
            if (window.Shopify?.analytics?.meta?.product) {
                const product = window.Shopify.analytics.meta.product;
                
                // Check if product has auction metafields
                if (product.metafields && product.metafields.auction) {
                    const auctionData = product.metafields.auction;
                    if (auctionData.is_auction && auctionData.auction_id) {
                        return {
                            hasAuction: true,
                            auctionId: auctionData.auction_id,
                            status: auctionData.status || 'pending',
                            currentBid: parseFloat(auctionData.current_bid) || 0,
                            startingBid: parseFloat(auctionData.starting_bid) || 0,
                            reservePrice: parseFloat(auctionData.reserve_price) || 0,
                            endTime: auctionData.end_time,
                            bidCount: parseInt(auctionData.bid_count) || 0,
                            buyNowPrice: parseFloat(auctionData.buy_now_price) || 0
                        };
                    }
                }
            }

            // Fallback: try to get from product JSON script tag
            const productJson = document.querySelector('script[type="application/json"][data-product-json]');
            if (productJson) {
                try {
                    const product = JSON.parse(productJson.textContent);
                    if (product.metafields && product.metafields.auction) {
                        const auctionData = product.metafields.auction;
                        if (auctionData.is_auction && auctionData.auction_id) {
                            return {
                                hasAuction: true,
                                auctionId: auctionData.auction_id,
                                status: auctionData.status || 'pending',
                                currentBid: parseFloat(auctionData.current_bid) || 0,
                                startingBid: parseFloat(auctionData.starting_bid) || 0,
                                reservePrice: parseFloat(auctionData.reserve_price) || 0,
                                endTime: auctionData.end_time,
                                bidCount: parseInt(auctionData.bid_count) || 0,
                                buyNowPrice: parseFloat(auctionData.buy_now_price) || 0
                            };
                        }
                    }
                } catch (e) {
                    console.warn('Bidly: Error parsing product JSON:', e);
                }
            }

            return { hasAuction: false };
        } catch (error) {
            console.warn('Bidly: Error checking product metafields:', error);
            return { hasAuction: false };
        }
    }

    // Find pricing section to overlay widget
    function findPricingSection() {
        for (const selector of CONFIG.pricingSelectors) {
            const element = document.querySelector(selector);
            if (element) {
                return element;
            }
        }
        return null;
    }

    // Inject widget into pricing section
    function injectWidget(auctionData) {
        const pricingSection = findPricingSection();
        if (!pricingSection) {
            console.warn('Bidly: Could not find pricing section to overlay widget');
            return;
        }

        // Remove existing widget if any
        const existingWidget = document.querySelector(`.${CONFIG.widgetClass}`);
        if (existingWidget) {
            existingWidget.remove();
        }

        // Create overlay container
        const overlayContainer = document.createElement('div');
        overlayContainer.className = CONFIG.widgetClass;
        overlayContainer.innerHTML = createWidgetHTML(auctionData);

        // Position the widget as an overlay
        const pricingRect = pricingSection.getBoundingClientRect();
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        overlayContainer.style.position = 'absolute';
        overlayContainer.style.top = (pricingRect.bottom + scrollTop + 20) + 'px';
        overlayContainer.style.left = pricingRect.left + 'px';
        overlayContainer.style.width = pricingRect.width + 'px';
        overlayContainer.style.zIndex = '1000';
        overlayContainer.style.maxWidth = '100%';

        // Insert the widget
        document.body.appendChild(overlayContainer);

        // Initialize countdown timer if active
        if (auctionData.status === 'active' && auctionData.endTime) {
            initializeCountdown(auctionData.auctionId, auctionData.endTime);
        }

        // Initialize real-time updates
        initializeRealTimeUpdates(auctionData.auctionId);

        // Adjust position on scroll
        window.addEventListener('scroll', () => {
            const newPricingRect = pricingSection.getBoundingClientRect();
            const newScrollTop = window.pageYOffset || document.documentElement.scrollTop;
            overlayContainer.style.top = (newPricingRect.bottom + newScrollTop + 20) + 'px';
            overlayContainer.style.left = newPricingRect.left + 'px';
            overlayContainer.style.width = newPricingRect.width + 'px';
        });

        // Adjust position on resize
        window.addEventListener('resize', () => {
            const newPricingRect = pricingSection.getBoundingClientRect();
            const newScrollTop = window.pageYOffset || document.documentElement.scrollTop;
            overlayContainer.style.top = (newPricingRect.bottom + newScrollTop + 20) + 'px';
            overlayContainer.style.left = newPricingRect.left + 'px';
            overlayContainer.style.width = newPricingRect.width + 'px';
        });
    }

    // Initialize countdown timer
    function initializeCountdown(auctionId, endTime) {
        const countdownElement = document.querySelector(`#bidly-auto-widget-${auctionId} .bidly-countdown`);
        if (!countdownElement) return;

        const endTimestamp = new Date(endTime).getTime();
        
        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endTimestamp - now;

            if (distance < 0) {
                countdownElement.innerHTML = 'Auction Ended';
                return;
            }

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            countdownElement.querySelector('.bidly-timer-days').textContent = days;
            countdownElement.querySelector('.bidly-timer-hours').textContent = hours;
            countdownElement.querySelector('.bidly-timer-minutes').textContent = minutes;
            countdownElement.querySelector('.bidly-timer-seconds').textContent = seconds;
        }

        updateCountdown();
        setInterval(updateCountdown, 1000);
    }

    // Initialize real-time updates via polling
    function initializeRealTimeUpdates(auctionId) {
        setInterval(async () => {
            try {
                const response = await fetch(`${CONFIG.backendUrl}/api/auctions/${auctionId}?shop=${CONFIG.shopDomain}`);
                if (!response.ok) return;

                const data = await response.json();
                if (data.success && data.auction) {
                    updateWidgetData(auctionId, data.auction);
                }
            } catch (error) {
                console.warn('Bidly: Error updating auction data:', error);
            }
        }, 5000);
    }

    // Update widget data in real-time
    function updateWidgetData(auctionId, auctionData) {
        const widget = document.querySelector(`#bidly-auto-widget-${auctionId}`);
        if (!widget) return;

        // Update current bid
        const currentBidElement = widget.querySelector('[data-current-bid]');
        if (currentBidElement) {
            currentBidElement.textContent = `$${auctionData.current_bid.toFixed(2)}`;
            currentBidElement.setAttribute('data-current-bid', auctionData.current_bid);
        }

        // Update bid count
        const bidCountElement = widget.querySelector('[data-bid-count]');
        if (bidCountElement) {
            bidCountElement.textContent = auctionData.bid_count;
            bidCountElement.setAttribute('data-bid-count', auctionData.bid_count);
        }

        // Update status if changed
        if (auctionData.status !== 'active') {
            const statusElement = widget.querySelector('.bidly-widget-status');
            if (statusElement) {
                statusElement.innerHTML = auctionData.status === 'ended' ? 
                    '<span class="bidly-status-ended">● ENDED</span>' : 
                    '<span class="bidly-status-pending">● PENDING</span>';
            }
        }
    }

    // Global functions for modals
    window.openBidModal = function(auctionId) {
        alert('Bid modal would open here for auction: ' + auctionId);
    };

    window.openBuyNowModal = function(auctionId, price) {
        alert('Buy now modal would open here for auction: ' + auctionId + ' at price: $' + price);
    };

    window.openBidHistory = function(auctionId) {
        window.open(`${CONFIG.backendUrl}/api/auctions/${auctionId}/bids?shop=${CONFIG.shopDomain}`, '_blank');
    };

    // Main initialization
    async function init() {
        console.log('Bidly: Checking for auction data...');
        
        // Check if product has auction data
        const auctionCheck = await checkProductMetafields();
        
        if (auctionCheck.hasAuction) {
            console.log('Bidly: Product has auction data, injecting widget...', auctionCheck);
            injectWidget(auctionCheck);
        } else {
            console.log('Bidly: No auction data found for this product');
        }
    }

    // Wait for page to be ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
</script>

<style>
/* Inline CSS for the widget - ensures it works without external files */
.bidly-auto-auction-widget {
    position: absolute;
    margin: 0;
    z-index: 1000;
    pointer-events: auto;
}

.bidly-widget-overlay {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 12px;
    padding: 20px;
    color: white;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    position: relative;
    overflow: hidden;
}

.bidly-widget-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    pointer-events: none;
}

.bidly-widget-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    position: relative;
    z-index: 1;
}

.bidly-widget-title {
    font-size: 24px;
    font-weight: 700;
    margin: 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.bidly-widget-status {
    display: flex;
    align-items: center;
}

.bidly-status-active {
    background: #00ff88;
    color: #000;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    animation: pulse 2s infinite;
}

.bidly-status-pending {
    background: #ffa500;
    color: #000;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.bidly-status-ended {
    background: #ff4757;
    color: #fff;
    padding: 4px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
}

.bidly-widget-timer {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    text-align: center;
    position: relative;
    z-index: 1;
}

.bidly-timer-label {
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 8px;
    opacity: 0.9;
}

.bidly-countdown {
    font-size: 18px;
    font-weight: 700;
    font-family: 'Courier New', monospace;
    letter-spacing: 1px;
}

.bidly-widget-pricing {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
    position: relative;
    z-index: 1;
}

.bidly-current-bid,
.bidly-reserve-price,
.bidly-bid-count {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    padding: 12px;
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.bidly-label {
    display: block;
    font-size: 12px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 4px;
    opacity: 0.8;
}

.bidly-amount,
.bidly-count {
    display: block;
    font-size: 20px;
    font-weight: 700;
    color: #fff;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.bidly-widget-actions {
    display: flex;
    gap: 12px;
    margin-bottom: 15px;
    position: relative;
    z-index: 1;
}

.bidly-bid-btn,
.bidly-buy-now-btn {
    flex: 1;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.bidly-bid-btn {
    background: #00ff88;
    color: #000;
    box-shadow: 0 4px 15px rgba(0, 255, 136, 0.3);
}

.bidly-bid-btn:hover {
    background: #00e077;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 255, 136, 0.4);
}

.bidly-buy-now-btn {
    background: #ff6b6b;
    color: #fff;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
}

.bidly-buy-now-btn:hover {
    background: #ff5252;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
}

.bidly-pending-message,
.bidly-ended-message {
    text-align: center;
    padding: 15px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    margin-bottom: 15px;
    position: relative;
    z-index: 1;
}

.bidly-widget-footer {
    text-align: center;
    position: relative;
    z-index: 1;
}

.bidly-history-link {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    font-size: 14px;
    font-weight: 500;
    transition: color 0.3s ease;
}

.bidly-history-link:hover {
    color: #fff;
    text-decoration: underline;
}

/* Responsive Design */
@media (max-width: 768px) {
    .bidly-widget-overlay {
        padding: 15px;
        margin: 15px 0;
    }
    
    .bidly-widget-title {
        font-size: 20px;
    }
    
    .bidly-widget-pricing {
        grid-template-columns: 1fr;
        gap: 10px;
    }
    
    .bidly-widget-actions {
        flex-direction: column;
    }
    
    .bidly-bid-btn,
    .bidly-buy-now-btn {
        padding: 14px 20px;
    }
    
    .bidly-countdown {
        font-size: 16px;
    }
}

@media (max-width: 480px) {
    .bidly-widget-overlay {
        padding: 12px;
        margin: 10px 0;
    }
    
    .bidly-widget-header {
        flex-direction: column;
        gap: 10px;
        text-align: center;
    }
    
    .bidly-widget-title {
        font-size: 18px;
    }
    
    .bidly-amount,
    .bidly-count {
        font-size: 18px;
    }
}

/* Animation for widget appearance */
.bidly-auto-auction-widget {
    animation: slideInUp 0.5s ease-out;
}

@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
</style>
