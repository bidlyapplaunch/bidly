{% comment %}
  Bidly Auction List Block (Info Only - No Login/Bidding)
  Displays a list of auctions and redirects to Shopify product page on click
{% endcomment %}

{%- liquid
  assign block_id = block.id
  assign shop_domain = shop.permanent_domain
  assign max_auctions = block.settings.max_auctions | default: 6
  assign show_ended = block.settings.show_ended | default: false
-%}

<div id="bidly-auction-list-{{ block_id }}" 
     class="bidly-auction-list-info" 
     data-block-id="{{ block_id }}" 
     data-shop="{{ shop_domain }}"
     {{ block.shopify_attributes }}
     style="{% if shop.design_mode %}min-height: 200px;{% endif %}">
  <div class="bidly-loading" id="bidly-loading-{{ block_id }}">
    <div class="bidly-spinner"></div>
    <p>Loading auctions...</p>
  </div>
  
  <div class="bidly-error" id="bidly-error-{{ block_id }}" style="display: none;">
    <p>Unable to load auctions. Please try again later.</p>
  </div>
  
  <div class="bidly-auctions-container" id="bidly-auctions-{{ block_id }}" style="display: none;">
    <h3 class="bidly-section-title">{{ block.settings.title | default: 'Live Auctions' }}</h3>
    <div class="bidly-auctions-grid" id="bidly-grid-{{ block_id }}">
      <!-- Auctions will be populated by JavaScript -->
    </div>
  </div>
  
  <!-- Theme Editor Placeholder -->
  <div class="bidly-theme-editor-placeholder" style="display: none;">
    <div style="padding: 2rem; text-align: center; background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px;">
      <h3 style="margin: 0 0 1rem 0; color: #495057;">üéØ Bidly Auction List</h3>
      <p style="margin: 0; color: #6c757d;">This block will display live auctions when the theme is published.</p>
      <div style="margin-top: 1rem; padding: 1rem; background: white; border-radius: 4px;">
        <p style="margin: 0; font-size: 0.9rem; color: #6c757d;">
          <strong>Settings:</strong><br>
          Title: {{ block.settings.title | default: 'Live Auctions' }}<br>
          Max Auctions: {{ max_auctions }}<br>
          Show Ended: {{ show_ended }}
        </p>
      </div>
    </div>
  </div>
</div>

<style>
  .bidly-auction-list-info {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    max-width: 100%;
    margin: 0 auto;
  }
  
  .bidly-loading {
    text-align: center;
    padding: 3rem;
  }
  
  .bidly-spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: bidly-spin 1s linear infinite;
    margin: 0 auto 1rem;
  }
  
  @keyframes bidly-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .bidly-error {
    background-color: #fee;
    border: 1px solid #fcc;
    border-radius: 8px;
    padding: 2rem;
    text-align: center;
    color: #c33;
  }
  
  .bidly-section-title {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 2rem;
    text-align: center;
    color: #1f2937;
  }
  
  .bidly-auctions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  .bidly-auction-card {
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    flex-direction: column;
  }
  
  .bidly-auction-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0,0,0,0.15);
  }
  
  .bidly-auction-card-image {
    width: 100%;
    height: 250px;
    object-fit: contain;
    background-color: #f8f9fa;
  }
  
  .bidly-auction-card-content {
    padding: 1.5rem;
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .bidly-auction-card-title {
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
    color: #1f2937;
    line-height: 1.3;
  }
  
  .bidly-auction-card-status {
    display: inline-block;
    padding: 0.4rem 0.8rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 1rem;
    width: fit-content;
  }
  
  .bidly-status-active {
    background-color: #d4edda;
    color: #155724;
  }
  
  .bidly-status-pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  .bidly-status-ended {
    background-color: #f8d7da;
    color: #721c24;
  }
  
  .bidly-auction-card-price {
    margin-bottom: 0.5rem;
  }
  
  .bidly-price-label {
    font-size: 0.75rem;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .bidly-price-amount {
    font-size: 1.5rem;
    font-weight: 700;
    color: #10b981;
  }
  
  .bidly-auction-card-time {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
  }
  
  .bidly-auction-card-bids {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0.5rem;
  }
  
  .bidly-view-product-link {
    margin-top: 1rem;
    padding: 0.75rem 1.5rem;
    background-color: #6366f1;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.95rem;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    text-decoration: none;
    display: block;
    transition: all 0.2s ease;
  }
  
  .bidly-auction-card:hover .bidly-view-product-link {
    background-color: #4f46e5;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
  }
  
  @media (max-width: 768px) {
    .bidly-auctions-grid {
      grid-template-columns: 1fr;
    }
    
    .bidly-section-title {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  (function() {
    function initAuctionList() {
      const blockId = '{{ block_id }}';
      const shopDomain = '{{ shop_domain }}';
      const maxAuctions = {{ max_auctions }};
      const showEnded = {{ show_ended }};
      
      // Check if in theme editor
      const isThemeEditor = window.Shopify && (
        window.Shopify.designMode || 
        window.location.search.includes('preview_theme_id') ||
        document.body.classList.contains('shopify-design-mode')
      );
      
      if (isThemeEditor) {
        const placeholder = document.querySelector(`#bidly-auction-list-${blockId} .bidly-theme-editor-placeholder`);
        const loading = document.querySelector(`#bidly-loading-${blockId}`);
        if (placeholder) placeholder.style.display = 'block';
        if (loading) loading.style.display = 'none';
        return;
      }
      
      // Fetch auctions
      fetch(`/apps/bidly/api/auctions?shop=${shopDomain}&status=active&limit=${maxAuctions}`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.data && data.data.length > 0) {
            // Filter auctions based on status
            let auctions = data.data;
            if (!showEnded) {
              auctions = auctions.filter(auction => {
                const status = computeAuctionStatus(auction);
                return status !== 'ended';
              });
            }
            // Limit to maxAuctions
            auctions = auctions.slice(0, maxAuctions);
            
            renderAuctions(blockId, auctions, shopDomain);
          } else {
            showError(blockId, 'No auctions found');
          }
        })
        .catch(error => {
          console.error('Error loading auctions:', error);
          showError(blockId, error.message);
        });
    }
    
    function renderAuctions(blockId, auctions, shopDomain) {
      const container = document.querySelector(`#bidly-auctions-${blockId}`);
      const grid = document.querySelector(`#bidly-grid-${blockId}`);
      const loading = document.querySelector(`#bidly-loading-${blockId}`);
      
      if (!grid) return;
      
      grid.innerHTML = auctions.map(auction => {
        const productHandle = auction.productData?.handle || '';
        const productUrl = productHandle ? `https://${shopDomain}/products/${productHandle}` : '#';
        const productImage = auction.productData?.images?.[0]?.src || auction.productData?.image?.src || '';
        const productTitle = auction.productData?.title || auction.productTitle || 'Auction Item';
        
        const status = computeAuctionStatus(auction);
        const timeLeft = formatTimeLeft(auction.endTime);
        const currentBid = auction.currentBid || 0;
        const startingBid = auction.startingBid || 0;
        const displayPrice = currentBid > 0 ? currentBid : startingBid;
        const priceLabel = currentBid > 0 ? 'Current Bid' : 'Starting Bid';
        const bidCount = auction.bidHistory?.length || 0;
        
        const statusClass = status === 'active' ? 'bidly-status-active' : status === 'ended' ? 'bidly-status-ended' : 'bidly-status-pending';
        const statusText = status === 'active' ? '‚óè LIVE' : status === 'ended' ? '‚óè ENDED' : '‚óè PENDING';
        
        const auctionId = auction._id || auction.id || Math.random().toString(36);
        return `
          <div class="bidly-auction-card" data-product-url="${productUrl}" data-auction-id="${auctionId}" data-end-time="${auction.endTime || ''}">
            ${productImage ? `<img src="${productImage}" alt="${productTitle}" class="bidly-auction-card-image">` : '<div class="bidly-auction-card-image" style="display: flex; align-items: center; justify-content: center; color: #999;">No Image</div>'}
            <div class="bidly-auction-card-content">
              <h3 class="bidly-auction-card-title">${productTitle}</h3>
              <div class="bidly-auction-card-status ${statusClass}">${statusText}</div>
              <div class="bidly-auction-card-price">
                <div class="bidly-price-label">${priceLabel}</div>
                <div class="bidly-price-amount">$${displayPrice.toFixed(2)}</div>
              </div>
              ${auction.endTime && status === 'active' ? `<div class="bidly-auction-card-time" data-end-time="${auction.endTime}">Time left: ${timeLeft}</div>` : ''}
              ${bidCount > 0 ? `<div class="bidly-auction-card-bids">${bidCount} Bid${bidCount !== 1 ? 's' : ''}</div>` : ''}
              <a href="${productUrl}" class="bidly-view-product-link" onclick="event.stopPropagation(); return true;">View Product ‚Üí</a>
            </div>
          </div>
        `;
      }).join('');
      
      // Make cards clickable
      grid.querySelectorAll('.bidly-auction-card').forEach(card => {
        const productUrl = card.getAttribute('data-product-url');
        card.addEventListener('click', function(e) {
          // Don't redirect if clicking on the link
          if (e.target.closest('.bidly-view-product-link')) return;
          if (productUrl && productUrl !== '#') {
            window.location.href = productUrl;
          }
        });
      });
      
      // Start real-time timers for active auctions
      auctions.forEach((auction, index) => {
        const status = computeAuctionStatus(auction);
        if (auction.endTime && status === 'active') {
          const auctionId = auction._id || auction.id || `list-${blockId}-${index}`;
          startCountdownTimer(`${blockId}-${auctionId}`, auction.endTime);
        }
      });
      
      if (container) container.style.display = 'block';
      if (loading) loading.style.display = 'none';
    }
    
    function startCountdownTimer(timerId, endTime) {
      // Clear any existing timer
      if (window.bidlyBlockTimers && window.bidlyBlockTimers[timerId]) {
        clearInterval(window.bidlyBlockTimers[timerId]);
      }
      
      if (!window.bidlyBlockTimers) {
        window.bidlyBlockTimers = {};
      }
      
      // Find timer element by data-end-time attribute
      const timerElement = document.querySelector(`.bidly-auction-card-time[data-end-time="${endTime}"]`);
      if (!timerElement) return;
      
      // Update immediately
      updateTimer(timerElement, endTime);
      
      // Update every second
      window.bidlyBlockTimers[timerId] = setInterval(() => {
        updateTimer(timerElement, endTime);
      }, 1000);
    }
    
    function updateTimer(element, endTime) {
      if (!element || !endTime) return;
      
      const timeLeft = formatTimeLeft(endTime);
      if (timeLeft === 'Auction Ended') {
        element.textContent = 'Time left: Auction Ended';
        // Find timer ID and clear it
        if (window.bidlyBlockTimers) {
          const timerId = Object.keys(window.bidlyBlockTimers).find(id => {
            const timerEl = document.querySelector(`.bidly-auction-card-time[data-end-time="${endTime}"]`);
            return timerEl === element;
          });
          if (timerId && window.bidlyBlockTimers[timerId]) {
            clearInterval(window.bidlyBlockTimers[timerId]);
            delete window.bidlyBlockTimers[timerId];
          }
        }
      } else {
        element.textContent = `Time left: ${timeLeft}`;
      }
    }
    
    function computeAuctionStatus(auction) {
      const now = new Date();
      const startTime = new Date(auction.startTime);
      const endTime = new Date(auction.endTime);
      
      if (now < startTime) return 'pending';
      if (now >= startTime && now < endTime) return 'active';
      return 'ended';
    }
    
    function formatTimeLeft(endTime) {
      if (!endTime) return '';
      const now = new Date();
      const end = new Date(endTime);
      const distance = end - now;
      
      if (distance < 0) return 'Auction Ended';
      
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);
      
      if (days > 0) return `${days}d ${hours}h ${minutes}m`;
      if (hours > 0) return `${hours}h ${minutes}m ${seconds}s`;
      if (minutes > 0) return `${minutes}m ${seconds}s`;
      return `${seconds}s`;
    }
    
    function showError(blockId, message) {
      const error = document.querySelector(`#bidly-error-${blockId}`);
      const loading = document.querySelector(`#bidly-loading-${blockId}`);
      if (error) {
        if (message) {
          const errorText = error.querySelector('p');
          if (errorText) errorText.textContent = message;
        }
        error.style.display = 'block';
      }
      if (loading) loading.style.display = 'none';
    }
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initAuctionList);
    } else {
      initAuctionList();
    }
  })();
</script>

{% schema %}
{
  "name": "Auction List",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Live Auctions"
    },
    {
      "type": "number",
      "id": "max_auctions",
      "label": "Max Auctions",
      "default": 6,
      "info": "Maximum number of auctions to display"
    },
    {
      "type": "checkbox",
      "id": "show_ended",
      "label": "Show Ended Auctions",
      "default": false
    }
  ]
}
{% endschema %}
