{% comment %}
  Auction App Embed - Automatically detects and overlays on auction products
  This appears in the "App embeds" section of theme customization
  No manual placement needed - just enable/disable
{% endcomment %}

{% schema %}
{
  "name": "Auction App Embed",
  "target": "body",
  "settings": [
    {
      "type": "header",
      "content": "Auction Widget Settings"
    },
    {
      "type": "checkbox",
      "id": "show_timer",
      "label": "Show countdown timer",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_bid_history",
      "label": "Show bid history link",
      "default": true
    },
    {
      "type": "select",
      "id": "widget_position",
      "label": "Widget position",
      "options": [
        {
          "value": "below_price",
          "label": "Below product price"
        },
        {
          "value": "above_price",
          "label": "Above product price"
        },
        {
          "value": "replace_price",
          "label": "Replace product price"
        }
      ],
      "default": "below_price"
    }
  ]
}
{% endschema %}

<link rel="stylesheet" href="{{ 'auction-app-embed.css' | asset_url }}">

<!-- Inject Shopify customer data -->
<script>
  window.customerData = {
    id: {{ customer.id | json }},
    email: {{ customer.email | json }},
    first_name: {{ customer.first_name | json }},
    last_name: {{ customer.last_name | json }}
  };
  console.log('Bidly: Shopify customer data injected:', window.customerData);
</script>

<script src="{{ 'auction-widget-simple.js' | asset_url }}" defer></script>
<script src="{{ 'auction-app-embed.js' | asset_url }}" defer></script>

<script>
// Initialize the auction app embed
window.BidlyAuctionEmbed = {
    init: function() {
        console.log('Bidly: Initializing auction app embed...');
        
        // Get settings from block
        const settings = {
            show_timer: {{ block.settings.show_timer | default: true }},
            show_bid_history: {{ block.settings.show_bid_history | default: true }},
            widget_position: '{{ block.settings.widget_position | default: "below_price" }}'
        };
        
        // Check if product has auction data
        this.checkProductMetafields().then(auctionCheck => {
            if (auctionCheck.hasAuction) {
                console.log('Bidly: Product has auction data, injecting widget...', auctionCheck);
                this.injectWidget(auctionCheck, settings);
            } else {
                console.log('Bidly: No auction data found for this product');
            }
        });
    },
    
    checkProductMetafields: async function() {
        try {
            // Try to get product data from Shopify's global objects
            if (window.Shopify?.analytics?.meta?.product) {
                const product = window.Shopify.analytics.meta.product;
                
                // Check if product has auction metafields
                if (product.metafields && product.metafields.auction) {
                    const auctionData = product.metafields.auction;
                    if (auctionData.is_auction && auctionData.auction_id) {
                        return {
                            hasAuction: true,
                            auctionId: auctionData.auction_id,
                            status: auctionData.status || 'pending',
                            currentBid: parseFloat(auctionData.current_bid) || 0,
                            startingBid: parseFloat(auctionData.starting_bid) || 0,
                            reservePrice: parseFloat(auctionData.reserve_price) || 0,
                            endTime: auctionData.end_time,
                            bidCount: parseInt(auctionData.bid_count) || 0,
                            buyNowPrice: parseFloat(auctionData.buy_now_price) || 0
                        };
                    }
                }
            }

            // Fallback: try to get from product JSON script tag
            const productJson = document.querySelector('script[type="application/json"][data-product-json]');
            if (productJson) {
                try {
                    const product = JSON.parse(productJson.textContent);
                    if (product.metafields && product.metafields.auction) {
                        const auctionData = product.metafields.auction;
                        if (auctionData.is_auction && auctionData.auction_id) {
                            return {
                                hasAuction: true,
                                auctionId: auctionData.auction_id,
                                status: auctionData.status || 'pending',
                                currentBid: parseFloat(auctionData.current_bid) || 0,
                                startingBid: parseFloat(auctionData.starting_bid) || 0,
                                reservePrice: parseFloat(auctionData.reserve_price) || 0,
                                endTime: auctionData.end_time,
                                bidCount: parseInt(auctionData.bid_count) || 0,
                                buyNowPrice: parseFloat(auctionData.buy_now_price) || 0
                            };
                        }
                    }
                } catch (e) {
                    console.warn('Bidly: Error parsing product JSON:', e);
                }
            }

            return { hasAuction: false };
        } catch (error) {
            console.warn('Bidly: Error checking product metafields:', error);
            return { hasAuction: false };
        }
    },
    
    injectWidget: function(auctionData, settings) {
        // This will be handled by the external JavaScript file
        if (window.BidlyAuctionWidget) {
            window.BidlyAuctionWidget.inject(auctionData, settings);
        }
    }
};

// Initialize when DOM is ready
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.BidlyAuctionEmbed.init();
    });
} else {
    window.BidlyAuctionEmbed.init();
}
</script>