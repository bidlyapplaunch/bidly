{% comment %}
  Bidly Single Auction Block (Info Only - No Login/Bidding)
  Displays auction information and redirects to Shopify product page on click
{% endcomment %}

{%- liquid
  assign block_id = block.id
  assign shop_domain = shop.permanent_domain
  assign auction_id = block.settings.auction_id
-%}

<div id="bidly-single-auction-{{ block_id }}" 
     class="bidly-single-auction-info" 
     data-block-id="{{ block_id }}" 
     data-shop="{{ shop_domain }}" 
     data-auction-id="{{ auction_id }}"
     {{ block.shopify_attributes }}
     style="{% if shop.design_mode %}min-height: 200px;{% endif %}">
  <div class="bidly-loading" id="bidly-loading-{{ block_id }}">
    <div class="bidly-spinner"></div>
    <p>Loading auction...</p>
  </div>
  
  <div class="bidly-error" id="bidly-error-{{ block_id }}" style="display: none;">
    <p>Unable to load auction. Please try again later.</p>
  </div>
  
  {% unless auction_id %}
  <div class="bidly-config-error" style="padding: 2rem; text-align: center; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; color: #856404;">
    <h3 style="margin: 0 0 1rem 0;">‚ö†Ô∏è Configuration Required</h3>
    <p style="margin: 0;">Please set an Auction ID in the block settings to display an auction.</p>
  </div>
  {% endunless %}
  
  <div class="bidly-auction-detail" id="bidly-auction-detail-{{ block_id }}" style="display: none;">
    <!-- Auction details will be populated by JavaScript -->
  </div>
  
  <!-- Theme Editor Placeholder -->
  <div class="bidly-theme-editor-placeholder" style="display: none;">
    <div style="padding: 2rem; text-align: center; background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px;">
      <h3 style="margin: 0 0 1rem 0; color: #495057;">üéØ Single Auction</h3>
      <p style="margin: 0; color: #6c757d;">This block will display a specific auction when the theme is published.</p>
      <div style="margin-top: 1rem; padding: 1rem; background: white; border-radius: 4px;">
        <p style="margin: 0; font-size: 0.9rem; color: #6c757d;">
          <strong>Settings:</strong><br>
          Auction ID: {{ block.settings.auction_id | default: 'Not set' }}
        </p>
      </div>
    </div>
  </div>
</div>

<style>
  .bidly-single-auction-info {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    max-width: 100%;
    margin: 0 auto;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .bidly-single-auction-info:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(0,0,0,0.15) !important;
  }
  
  .bidly-loading {
    text-align: center;
    padding: 2rem;
  }
  
  .bidly-spinner {
    border: 3px solid #f3f3f3;
    border-top: 3px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: bidly-spin 1s linear infinite;
    margin: 0 auto 1rem;
  }
  
  @keyframes bidly-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .bidly-error {
    background-color: #fee;
    border: 1px solid #fcc;
    border-radius: 4px;
    padding: 1rem;
    text-align: center;
    color: #c33;
  }
  
  .bidly-auction-detail {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    align-items: start;
    background: white;
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 2rem;
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
  }
  
  .bidly-auction-image-container {
    position: relative;
  }
  
  .bidly-auction-image {
    width: 100%;
    height: 400px;
    object-fit: contain;
    object-position: center;
    border-radius: 8px;
    background-color: #f8f9fa;
  }
  
  .bidly-auction-info {
    padding: 1rem 0;
  }
  
  .bidly-auction-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.3;
    color: #1f2937;
  }
  
  .bidly-auction-price {
    margin-bottom: 1rem;
  }
  
  .bidly-price-label {
    font-size: 0.9rem;
    color: #666;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .bidly-price-amount {
    font-size: 2rem;
    font-weight: 700;
    color: #10b981;
  }
  
  .bidly-starting-bid {
    font-size: 1rem;
    color: #888;
    margin-top: 0.5rem;
  }
  
  .bidly-auction-time {
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 1rem;
  }
  
  .bidly-auction-status {
    display: inline-block;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 1rem;
  }
  
  .bidly-status-active {
    background-color: #d4edda;
    color: #155724;
  }
  
  .bidly-status-pending {
    background-color: #fff3cd;
    color: #856404;
  }
  
  .bidly-status-ended {
    background-color: #f8d7da;
    color: #721c24;
  }
  
  .bidly-view-product {
    margin-top: 1.5rem;
    padding: 1rem 2rem;
    background-color: #6366f1;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.1rem;
    font-weight: 600;
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .bidly-view-product:hover {
    background-color: #4f46e5;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
  }
  
  @media (max-width: 768px) {
    .bidly-auction-detail {
      grid-template-columns: 1fr;
      gap: 1rem;
      padding: 1.5rem;
    }
    
    .bidly-auction-image {
      height: 250px;
    }
    
    .bidly-auction-title {
      font-size: 1.5rem;
    }
    
    .bidly-price-amount {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  (function() {
    function initSingleAuction() {
      const blockId = '{{ block_id }}';
      const shopDomain = '{{ shop_domain }}';
      const auctionId = '{{ auction_id }}';
      
      if (!auctionId) {
        document.querySelector(`#bidly-error-${blockId}`).style.display = 'block';
        document.querySelector(`#bidly-loading-${blockId}`).style.display = 'none';
        return;
      }
      
      // Check if in theme editor
      const isThemeEditor = window.Shopify && (
        window.Shopify.designMode || 
        window.location.search.includes('preview_theme_id') ||
        document.body.classList.contains('shopify-design-mode')
      );
      
      if (isThemeEditor) {
        const placeholder = document.querySelector(`#bidly-single-auction-${blockId} .bidly-theme-editor-placeholder`);
        const loading = document.querySelector(`#bidly-loading-${blockId}`);
        if (placeholder) placeholder.style.display = 'block';
        if (loading) loading.style.display = 'none';
        return;
      }
      
      // Fetch auction data
      fetch(`/apps/bidly/api/auctions/${auctionId}?shop=${shopDomain}`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.data) {
            renderSingleAuction(blockId, data.data, shopDomain);
          } else {
            showError(blockId);
          }
        })
        .catch(error => {
          console.error('Error loading single auction:', error);
          showError(blockId);
        });
    }
    
    function renderSingleAuction(blockId, auction, shopDomain) {
      const container = document.querySelector(`#bidly-auction-detail-${blockId}`);
      const loading = document.querySelector(`#bidly-loading-${blockId}`);
      
      if (!container) return;
      
      const productHandle = auction.productData?.handle || '';
      const productUrl = productHandle ? `https://${shopDomain}/products/${productHandle}` : '#';
      const productImage = auction.productData?.images?.[0]?.src || auction.productData?.image?.src || '';
      const productTitle = auction.productData?.title || auction.productTitle || 'Auction Item';
      
      const status = computeAuctionStatus(auction);
      const timeLeft = formatTimeLeft(auction.endTime);
      const currentBid = auction.currentBid || 0;
      const startingBid = auction.startingBid || 0;
      const displayPrice = currentBid > 0 ? currentBid : startingBid;
      const priceLabel = currentBid > 0 ? 'Current Bid' : 'Starting Bid';
      const bidCount = auction.bidHistory?.length || 0;
      
      const statusClass = status === 'active' ? 'bidly-status-active' : status === 'ended' ? 'bidly-status-ended' : 'bidly-status-pending';
      const statusText = status === 'active' ? '‚óè LIVE' : status === 'ended' ? '‚óè ENDED' : '‚óè PENDING';
      
      container.innerHTML = `
        <div class="bidly-auction-image-container">
          ${productImage ? `<img src="${productImage}" alt="${productTitle}" class="bidly-auction-image">` : '<div class="bidly-auction-image" style="background: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #999;">No Image</div>'}
        </div>
        <div class="bidly-auction-info">
          <h2 class="bidly-auction-title">${productTitle}</h2>
          <div class="bidly-auction-status ${statusClass}">${statusText}</div>
          <div class="bidly-auction-price">
            <div class="bidly-price-label">${priceLabel}</div>
            <div class="bidly-price-amount">$${displayPrice.toFixed(2)}</div>
            ${startingBid > 0 && currentBid === 0 ? `<div class="bidly-starting-bid">Starting: $${startingBid.toFixed(2)}</div>` : ''}
          </div>
              ${auction.endTime && status === 'active' ? `<div class="bidly-auction-time" data-end-time="${auction.endTime}">Time left: ${timeLeft}</div>` : ''}
              ${bidCount > 0 ? `<div style="color: #666; font-size: 1rem; margin-top: 0.5rem;">${bidCount} Bid${bidCount !== 1 ? 's' : ''}</div>` : ''}
              <div class="bidly-view-product">View Product ‚Üí</div>
        </div>
      `;
      
      // Make entire container clickable
      container.addEventListener('click', function(e) {
        // Don't redirect if clicking on view product button (it's already styled as a button)
        if (e.target.closest('.bidly-view-product')) {
          if (productUrl && productUrl !== '#') {
            window.location.href = productUrl;
          }
          return;
        }
        // Otherwise redirect on any click
        if (productUrl && productUrl !== '#') {
          window.location.href = productUrl;
        }
      });
      
      // Start real-time timer if auction is active
      if (auction.endTime && status === 'active') {
        startCountdownTimer(blockId, auction.endTime);
      }
      
      container.style.display = 'grid';
      if (loading) loading.style.display = 'none';
    }
    
    function startCountdownTimer(blockId, endTime) {
      // Clear any existing timer for this block
      if (window.bidlyBlockTimers && window.bidlyBlockTimers[blockId]) {
        clearInterval(window.bidlyBlockTimers[blockId]);
      }
      
      if (!window.bidlyBlockTimers) {
        window.bidlyBlockTimers = {};
      }
      
      const timerElement = document.querySelector(`#bidly-auction-detail-${blockId} .bidly-auction-time`);
      if (!timerElement) return;
      
      // Update immediately
      updateTimer(timerElement, endTime);
      
      // Update every second
      window.bidlyBlockTimers[blockId] = setInterval(() => {
        updateTimer(timerElement, endTime);
      }, 1000);
    }
    
    function updateTimer(element, endTime) {
      if (!element || !endTime) return;
      
      const timeLeft = formatTimeLeft(endTime);
      if (timeLeft === 'Auction Ended') {
        element.textContent = 'Time left: Auction Ended';
        if (window.bidlyBlockTimers) {
          const blockId = element.closest('[id*="bidly-auction-detail"]')?.id?.replace('bidly-auction-detail-', '');
          if (blockId && window.bidlyBlockTimers[blockId]) {
            clearInterval(window.bidlyBlockTimers[blockId]);
            delete window.bidlyBlockTimers[blockId];
          }
        }
      } else {
        element.textContent = `Time left: ${timeLeft}`;
      }
    }
    
    function computeAuctionStatus(auction) {
      const now = new Date();
      const startTime = new Date(auction.startTime);
      const endTime = new Date(auction.endTime);
      
      if (now < startTime) return 'pending';
      if (now >= startTime && now < endTime) return 'active';
      return 'ended';
    }
    
    function formatTimeLeft(endTime) {
      if (!endTime) return '';
      const now = new Date();
      const end = new Date(endTime);
      const distance = end - now;
      
      if (distance < 0) return 'Auction Ended';
      
      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);
      
      if (days > 0) return `${days}d ${hours}h ${minutes}m`;
      if (hours > 0) return `${hours}h ${minutes}m ${seconds}s`;
      if (minutes > 0) return `${minutes}m ${seconds}s`;
      return `${seconds}s`;
    }
    
    function showError(blockId) {
      const error = document.querySelector(`#bidly-error-${blockId}`);
      const loading = document.querySelector(`#bidly-loading-${blockId}`);
      if (error) error.style.display = 'block';
      if (loading) loading.style.display = 'none';
    }
    
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initSingleAuction);
    } else {
      initSingleAuction();
    }
  })();
</script>

{% schema %}
{
  "name": "Single Auction",
  "target": "section",
  "settings": [
    {
      "type": "text",
      "id": "auction_id",
      "label": "Auction ID",
      "info": "Enter the specific auction ID to display"
    }
  ]
}
{% endschema %}
